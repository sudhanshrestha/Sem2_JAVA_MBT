/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CourseWork;

import java.awt.Color;
import java.awt.Font;
import java.awt.Desktop;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    
    DefaultTableModel model = new DefaultTableModel();
    public GUI() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
       
        initialData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
     public void initialData() {
     
        Object data[][] = {
            {"Mob_001", "S10", "Samsung", "128GB", "Sprint", 80000},
            {"Mob_002", "S8", "Samsung", "64GB", "Verizon Wireless", 40000},
            {"Mob_003", "6plus", "Iphone", "64GB", "Sprint", 35000},
            {"Mob_004", "K20", "Huawei", "32GB", "T-Mobile", 45000},
            {"Mob_005", "F15", "Oppo", "64GB", "AT&T Mobility", 20000},
            {"Mob_006", "X30", "Vivo", "32GB", "Verizon Wireless", 52000},
            {"Mob_007", "K30", "Redmi", "32GB", "T-Mobile", 25700},
            {"Mob_008", "7 pro", "OnePlus", "128GB", "Sprint", 90000},
            {"Mob_009", "Nova 6", "Huawei", "128GB", "T-Mobile", 60000},
            {"Mob_010", "11", "Iphone", "128GB", "T-Mobile", 110000},
            {"Mob_011", "S5", "Vivo", "128GB", "AT&T Mobility", 43200},
            {"Mob_012", "7", "OnePlus", "64GB", "Sprint", 57000},
            {"Mob_013", "Reno Ace", "Oppo", "128GB", "Sprint", 55000}
            
            
        };
        String[] col = {
            "Moile ID", "Model", "Brand", "Storage", "Carrier", "Price"
        };
        model.setDataVector(data, col);
        dataTable.setModel(model);


}       
    int counter = 14;
    public static void selectionSort(ArrayList<Integer> arr) {
        for (int i = 0; i < arr.size() - 1; i++) {
            int index = i;
            for (int j = i + 1; j < arr.size(); j++) {
                if (arr.get(j) < arr.get(index)) {
                    index = j;//searching for lowest index  
                }
            }
            int smallerNumber = arr.get(index);
            arr.set(index, arr.get(i));
            arr.set(i, smallerNumber);
        }  //move row
    }
    
    public static void selectionSortString(ArrayList<String> arr) {
        for (int i = 0; i < arr.size() - 1; i++) {
            int index = i;
            for (int j = i + 1; j < arr.size(); j++) {
                if (arr.get(j).compareTo(arr.get(index)) < 0){
                    index = j;
                }
            }
            String temp = arr.get(index);
            arr.set(index, arr.get(i));
            arr.set(i, temp);
        }  //move row
    }
    
    
    public static int searchPrice(ArrayList<Integer> prices, int low, int high, Integer key) {

        if (low <= high) {
            int mid = (low + high) / 2; // get mid point
            if (prices.get(mid).equals(key)) {
                return mid;
            } else if ((key.compareTo(prices.get(mid))) < 0) {
                return searchPrice(prices, low, mid - 1, key);
            } else {
                return searchPrice(prices, mid + 1, high, key);
            }
        } else {
            return -1;
        }
    }
    
    
    public static int searchBrand(ArrayList<String> brands, int low, int high, String key) {

        if (low <= high) {
            int mid = (low + high) / 2; // get mid point
            if (brands.get(mid).equals(key)) {
                return mid;
            } else if ((key.compareTo(brands.get(mid))) < 0) {
                return searchBrand(brands, low, mid - 1, key);
            } else {
                return searchBrand(brands, mid + 1, high, key);
            }
        } else {
            return -1;
        }
    }
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpStorage = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        pnlComponents = new javax.swing.JPanel();
        lblMobileID = new javax.swing.JLabel();
        txtMobileID = new javax.swing.JTextField();
        lblMobileName = new javax.swing.JLabel();
        txtMobileName = new javax.swing.JTextField();
        lblBrandName = new javax.swing.JLabel();
        comboBrandName = new javax.swing.JComboBox<>();
        lblStorage = new javax.swing.JLabel();
        rb16 = new javax.swing.JRadioButton();
        rb32 = new javax.swing.JRadioButton();
        rb64 = new javax.swing.JRadioButton();
        rb128 = new javax.swing.JRadioButton();
        lblCarrier = new javax.swing.JLabel();
        comboCarrier = new javax.swing.JComboBox<>();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        pnlTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        txtSearchPrice = new javax.swing.JTextField();
        txtSearchBrand = new javax.swing.JTextField();
        lblSearchBrand = new javax.swing.JLabel();
        lblSearchPrice = new javax.swing.JLabel();
        jbtnSortPrice = new javax.swing.JButton();
        jbtnSearchPrice = new javax.swing.JButton();
        jbtnRefresh = new javax.swing.JButton();
        jbtnSortBrand = new javax.swing.JButton();
        jbtnSearchBrand = new javax.swing.JButton();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jmenuOpen = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuHelpItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        mainPanel.setBackground(new java.awt.Color(113, 128, 147));

        pnlComponents.setBackground(new java.awt.Color(47, 54, 64));
        pnlComponents.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(47, 54, 64), 1, true));

        lblMobileID.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblMobileID.setForeground(new java.awt.Color(255, 255, 255));
        lblMobileID.setText("Mobile ID:");

        txtMobileID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblMobileName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblMobileName.setForeground(new java.awt.Color(255, 255, 255));
        lblMobileName.setText("Model Name:");

        txtMobileName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblBrandName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblBrandName.setForeground(new java.awt.Color(255, 255, 255));
        lblBrandName.setText("Brand Name:");

        comboBrandName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboBrandName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Brand", "Samsung", "Iphone", "Redmi", "OnePlus", "Huawei", "Oppo", "Vivo" }));
        comboBrandName.setFocusable(false);

        lblStorage.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblStorage.setForeground(new java.awt.Color(255, 255, 255));
        lblStorage.setText("Storage:");

        rb16.setBackground(new java.awt.Color(47, 54, 64));
        btnGrpStorage.add(rb16);
        rb16.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        rb16.setForeground(new java.awt.Color(255, 255, 255));
        rb16.setText("16GB");
        rb16.setFocusPainted(false);
        rb16.setFocusable(false);
        rb16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb16ActionPerformed(evt);
            }
        });

        rb32.setBackground(new java.awt.Color(47, 54, 64));
        btnGrpStorage.add(rb32);
        rb32.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        rb32.setForeground(new java.awt.Color(255, 255, 255));
        rb32.setText("32GB");
        rb32.setFocusPainted(false);
        rb32.setFocusable(false);
        rb32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb32ActionPerformed(evt);
            }
        });

        rb64.setBackground(new java.awt.Color(47, 54, 64));
        btnGrpStorage.add(rb64);
        rb64.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        rb64.setForeground(new java.awt.Color(255, 255, 255));
        rb64.setText("64GB");
        rb64.setFocusPainted(false);
        rb64.setFocusable(false);
        rb64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb64ActionPerformed(evt);
            }
        });

        rb128.setBackground(new java.awt.Color(47, 54, 64));
        btnGrpStorage.add(rb128);
        rb128.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        rb128.setForeground(new java.awt.Color(255, 255, 255));
        rb128.setText("128GB");
        rb128.setFocusPainted(false);
        rb128.setFocusable(false);
        rb128.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb128ActionPerformed(evt);
            }
        });

        lblCarrier.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblCarrier.setForeground(new java.awt.Color(255, 255, 255));
        lblCarrier.setText("Carrier:");

        comboCarrier.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboCarrier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Carrier", "Verizon Wireless", "T-Mobile", "AT&T Mobility", "Sprint" }));
        comboCarrier.setFocusable(false);

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(255, 255, 255));
        lblPrice.setText("Price:");

        txtPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPriceKeyTyped(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(35, 43, 43));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnClear.setForeground(new java.awt.Color(51, 51, 51));
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(35, 43, 43));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(35, 43, 43));
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_mobile_30px_1.png"))); // NOI18N
        lblTitle.setText("MOBILE TRADERS");

        javax.swing.GroupLayout pnlComponentsLayout = new javax.swing.GroupLayout(pnlComponents);
        pnlComponents.setLayout(pnlComponentsLayout);
        pnlComponentsLayout.setHorizontalGroup(
            pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComponentsLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComponentsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboCarrier, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMobileID)
                    .addComponent(txtMobileID, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMobileName)
                    .addComponent(txtMobileName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBrandName)
                    .addComponent(comboBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStorage)
                    .addGroup(pnlComponentsLayout.createSequentialGroup()
                        .addComponent(rb16, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(rb32)
                        .addGap(14, 14, 14)
                        .addComponent(rb64)
                        .addGap(14, 14, 14)
                        .addComponent(rb128))
                    .addComponent(lblCarrier)
                    .addComponent(lblPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlComponentsLayout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlComponentsLayout.setVerticalGroup(
            pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComponentsLayout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(lblMobileID)
                .addGap(8, 8, 8)
                .addComponent(txtMobileID, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblMobileName)
                .addGap(8, 8, 8)
                .addComponent(txtMobileName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(lblBrandName)
                .addGap(8, 8, 8)
                .addComponent(comboBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lblStorage)
                .addGap(8, 8, 8)
                .addGroup(pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rb16)
                    .addComponent(rb32)
                    .addComponent(rb64)
                    .addComponent(rb128))
                .addComponent(lblCarrier)
                .addGap(8, 8, 8)
                .addComponent(comboCarrier, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lblPrice)
                .addGap(8, 8, 8)
                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 74, Short.MAX_VALUE))
        );

        pnlTable.setBackground(new java.awt.Color(113, 128, 147));
        pnlTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(113, 128, 147), 1, true));
        pnlTable.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mobile ID", "Model Name", "Brand Name", "Storage", "Carrier", "Price"
            }
        ));
        dataTable.setFocusable(false);
        dataTable.setRowHeight(25);
        dataTable.setSelectionBackground(new java.awt.Color(255, 76, 76));
        dataTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(dataTable);
        dataTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD,12));
        dataTable.getTableHeader().setOpaque(false);
        dataTable.getTableHeader().setBackground(new Color(47,54,64));
        dataTable.getTableHeader().setForeground(new Color(255,255,255));
        dataTable.setRowHeight(25);

        pnlTable.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 1150, 320));

        txtSearchPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchPriceKeyTyped(evt);
            }
        });
        pnlTable.add(txtSearchPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 150, 189, 30));
        pnlTable.add(txtSearchBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 150, 189, 30));

        lblSearchBrand.setBackground(new java.awt.Color(113, 128, 147));
        lblSearchBrand.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSearchBrand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_search_15px_1.png"))); // NOI18N
        lblSearchBrand.setText("Search by Brand");
        pnlTable.add(lblSearchBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 130, 140, 20));

        lblSearchPrice.setBackground(new java.awt.Color(113, 128, 147));
        lblSearchPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSearchPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_search_15px_1.png"))); // NOI18N
        lblSearchPrice.setText("Search by Price");
        pnlTable.add(lblSearchPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 130, 130, 20));

        jbtnSortPrice.setBackground(new java.awt.Color(113, 128, 147));
        jbtnSortPrice.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jbtnSortPrice.setText("Sort by Price");
        jbtnSortPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSortPriceActionPerformed(evt);
            }
        });
        pnlTable.add(jbtnSortPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 30));

        jbtnSearchPrice.setBackground(new java.awt.Color(113, 128, 147));
        jbtnSearchPrice.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jbtnSearchPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_search_15px_2.png"))); // NOI18N
        jbtnSearchPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSearchPriceActionPerformed(evt);
            }
        });
        pnlTable.add(jbtnSearchPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 150, 30, 30));

        jbtnRefresh.setBackground(new java.awt.Color(113, 128, 147));
        jbtnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbtnRefresh.setForeground(new java.awt.Color(51, 51, 51));
        jbtnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_refresh_20px.png"))); // NOI18N
        jbtnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRefreshActionPerformed(evt);
            }
        });
        pnlTable.add(jbtnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 530, 40, 30));

        jbtnSortBrand.setBackground(new java.awt.Color(113, 128, 147));
        jbtnSortBrand.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jbtnSortBrand.setText("Sort by Brand");
        jbtnSortBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSortBrandActionPerformed(evt);
            }
        });
        pnlTable.add(jbtnSortBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, 30));

        jbtnSearchBrand.setBackground(new java.awt.Color(113, 128, 147));
        jbtnSearchBrand.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jbtnSearchBrand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_search_15px_2.png"))); // NOI18N
        jbtnSearchBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSearchBrandActionPerformed(evt);
            }
        });
        pnlTable.add(jbtnSearchBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 150, 30, 30));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(pnlComponents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlComponents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(mainPanel);

        jMenuBarMain.setBackground(new java.awt.Color(102, 0, 204));

        jMenuFile.setText("File");

        jmenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmenuOpen.setText("Open");
        jmenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jmenuOpen);

        jMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuExit);

        jMenuBarMain.add(jMenuFile);

        jMenuHelp.setText("Help");

        jMenuHelpItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuHelpItem.setText("Help");
        jMenuHelpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHelpItemActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuHelpItem);

        jMenuBarMain.add(jMenuHelp);

        setJMenuBar(jMenuBarMain);
        jMenuBarMain.setOpaque(true);
        jMenuBarMain.setBackground(Color.BLACK);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String mobileID = txtMobileID.getText();
        String modelName = txtMobileName.getText();
        String price = txtPrice.getText();
        String brand = (String) comboBrandName.getSelectedItem();
        String carrier = (String) comboCarrier.getSelectedItem();
        String radioText = "";
        String a = "";
        boolean mobID_check = false;
        Pattern pattern = Pattern.compile("^[MOB].*");
        if(pattern.matcher(mobileID).matches()){
             mobID_check = true;
         }
        
        if (rb16.isSelected()) {
            radioText = rb16.getText();
        } else if (rb32.isSelected()) {
            radioText = rb32.getText();
        } else if (rb64.isSelected()) {
            radioText = rb64.getText();
        } else if (rb128.isSelected()) {
            radioText = rb128.getText();
        }
        
        
 
        boolean chk = false;
        boolean match = false;
        
        if (match == false) {
            if ("".equals(mobileID) || "".equals(modelName) || "".equals(price) || "".equals(radioText) || "Select Brand".equals(brand) || "Select Carrier".equals(carrier) || mobID_check == false) {
                JOptionPane.showMessageDialog(null, "Make sure you have filled the form properly");
            } else{
                if (a.equals(mobileID)) {
                JOptionPane.showMessageDialog(null, "Double Mobile ID Found");
            } else{
                   DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
                   model.setRowCount(counter);
                   counter++;
                   String[] info = {mobileID, modelName, brand, radioText, carrier, price};
                   int rowCount = dataTable.getRowCount();
                   int colCount = dataTable.getColumnCount();
                   int nextRow = 0;
                   boolean emptyFlag = false;
                   if (rowCount != 0) {
                   do {
                        if ((dataTable.getValueAt(nextRow, 0)) != null) {
                             nextRow++;
                        } else {
                                emptyFlag = true;
                               }
                       } while (nextRow < rowCount && !emptyFlag);
                            for (int i = 0; i < colCount; i++) {
                                dataTable.setValueAt(info[i], nextRow, i);
                          }
                            }
                   JOptionPane.showMessageDialog(null, "Data Sucussfully Added.");

                }
            }
        }
        
        int row = dataTable.getRowCount();
        int counter = 0;
        for (int i = 0; i < row; i++) {
         String val = (String) dataTable.getValueAt(i, 0);
            if (val == null || val == "") {
                model.removeRow(i);
                i=0;
                row = dataTable.getRowCount();
            }
            
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void rb16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb16ActionPerformed
        // adding value for radiobutton
        rb16.setActionCommand("16GB");
    }//GEN-LAST:event_rb16ActionPerformed

    private void rb32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb32ActionPerformed
        // Tadding value for radiobutton
        rb32.setActionCommand("32GB");
    }//GEN-LAST:event_rb32ActionPerformed

    private void rb64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb64ActionPerformed
        // adding value for radiobutton
        rb64.setActionCommand("64GB");
    }//GEN-LAST:event_rb64ActionPerformed

    private void rb128ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb128ActionPerformed
        // adding value for radiobutton
        rb128.setActionCommand("128GB");
    }//GEN-LAST:event_rb128ActionPerformed

    private void txtPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyTyped
        // adding  keyTyped event to accept numbers only
        char price = evt.getKeyChar();
        if(!isNumber(price)){
            evt.consume();
            
        }
     
    }//GEN-LAST:event_txtPriceKeyTyped

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
       
         int a = JOptionPane.showConfirmDialog(null, "Are you sure to Exit?", "Exit", JOptionPane.YES_NO_OPTION);
        if (a == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuHelpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHelpItemActionPerformed
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().open(new File("files\\User-Manual.pdf"));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jMenuHelpItemActionPerformed

    private void jmenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuOpenActionPerformed
     // file choser is created to open .csv files only
    ArrayList <String> records = new ArrayList<>();
    JFileChooser chooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.csv", "csv");
    chooser.setFileFilter(filter);
     if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
        try {
            FileReader file = new FileReader(chooser.getSelectedFile().getPath());
            BufferedReader csvReader = new BufferedReader(file);
            System.out.println("*====================*");
            System.out.println(" File is being read ");
            System.out.println("*====================*");
            String line ;
            while((line = csvReader.readLine()) != null) {                
                String[] values = line.split(",");
                for (int i = 0; i < 6; i++) {
                    String val= values[i];
                    records.add(val);
                }  
            } 
            System.out.println(records);
         } 
        catch(IOException e) {
            System.out.println(e);
        }
         
      
     }
     //removing datas from the table
      int rowCount = model.getRowCount();
        System.out.println("Row count is "+rowCount);
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
        }
        System.out.println(model);
        for (int i = 0; i < records.size(); i=i+6) {
                int first = i;
                int second = i+1;
                int third = i+2;
                int fourth = i+3;
                int fifth = i+4;
                int sixth = i+5;
                
                
                model.addRow(new Object[]{records.get(first),records.get(second),records.get(third),records.get(fourth),records.get(fifth),records.get(sixth)});
            
         
        }
 


    }//GEN-LAST:event_jmenuOpenActionPerformed

    private void jbtnSortPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSortPriceActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        ArrayList<Integer> st = new ArrayList<Integer>();
        int rowCount = dataTable.getRowCount();
        int mobilePrice;
        int rowIndex = 0;
        int colIndex = 5;
        boolean emptyFlag = false;
        do {
            String price = dataTable.getValueAt(rowIndex, colIndex).toString();
            mobilePrice = Integer.parseInt(price);
            if (price != null && price.length() != 0) {
                st.add(mobilePrice);
                rowIndex++;
            } else {
                emptyFlag = true;
            }
        } while (rowIndex < rowCount && !emptyFlag);
        selectionSort(st);

        for (int i = 0; i < dataTable.getRowCount(); i++) {
            for (int j = 0; j < dataTable.getRowCount(); j++) {
                String a = dataTable.getValueAt(j, 5).toString();
                int b = Integer.parseInt(a);
                if (b == st.get(i)) {
                    model.moveRow(j, j, i);
                }
            }
        }
    }//GEN-LAST:event_jbtnSortPriceActionPerformed

    private void jbtnSearchPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSearchPriceActionPerformed
      DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        String mobileID = "";
        String modelName = "";
        String brand = "";
        String storage = "";
        String carrier = "";
        String amount = "";
        ArrayList<Integer> lis = new ArrayList<Integer>();
        ArrayList<String> prices = new ArrayList<String>();
        int rowCount = dataTable.getRowCount();
        int mobilePrice;
        int rowIndex = 0;
        int colIndex = 5;
        boolean emptyFlag = false;
        do {
            String price = dataTable.getValueAt(rowIndex, colIndex).toString();
            mobilePrice = Integer.parseInt(price);
            if (price != null && price.length() != 0) {
                lis.add(mobilePrice);
                rowIndex++;
            } else {
                emptyFlag = true;
            }
        } while (rowIndex < rowCount && !emptyFlag);
        selectionSort(lis);
        //System.out.println(st);
        //System.out.println(st.get(0));
        if (txtSearchPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter the Price to search");
        } else {
            for (int i = 0; i < dataTable.getRowCount(); i++) {
                for (int j = 0; j < dataTable.getRowCount(); j++) {
                    String a = dataTable.getValueAt(j, 5).toString();
                    int b = Integer.parseInt(a);
                    if (b == lis.get(i)) {
                        model.moveRow(j, j, i);
                    }
                }
            }
            for (int i = 0; i < dataTable.getRowCount(); i++) {
                String conv = lis.get(i).toString();
                if(conv.equals(txtSearchPrice.getText()) ){
                        prices.add(dataTable.getValueAt(i, 0).toString());
                        prices.add(dataTable.getValueAt(i, 1).toString());
                        prices.add(dataTable.getValueAt(i, 2).toString());
                        prices.add(dataTable.getValueAt(i, 3).toString());
                        prices.add(dataTable.getValueAt(i, 4).toString());
                        prices.add(dataTable.getValueAt(i, 5).toString());
                    }
             }
            System.out.println(prices);
            int key = Integer.parseInt(txtSearchPrice.getText());
            int low = 0;
            int high = lis.size() - 1;
            int searchResult = GUI.searchPrice(lis, low, high, key);
            if (searchResult == -1) {
                JOptionPane.showMessageDialog(null, "No result found!");
                
            } else {
                mobileID = dataTable.getValueAt(searchResult, 0).toString();
                modelName = dataTable.getValueAt(searchResult, 1).toString();
                brand = dataTable.getValueAt(searchResult, 2).toString();
                storage = dataTable.getValueAt(searchResult, 3).toString();
                carrier = dataTable.getValueAt(searchResult, 4).toString();
                amount = dataTable.getValueAt(searchResult, 5).toString();
                JOptionPane.showMessageDialog(null, "Mobile ID: " + mobileID + "\nModel: " + modelName + "\nBrand: " + brand + "\nStorage: " + storage + "\nCarrier: " + carrier + "\nPrice: " + amount);
                txtSearchPrice.setText("");
                
            }
             //removing datas from the table
       
        System.out.println("Row count is "+rowCount);
        //Remove rows one by one from the end of the table
        if (searchResult != -1){
            for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
            }
            System.out.println(model);
            for (int i = 0; i < prices.size(); i=i+6) {
                    int first = i;
                    int second = i+1;
                    int third = i+2;
                    int fourth = i+3;
                    int fifth = i+4;
                    int sixth = i+5;


                    model.addRow(new Object[]{prices.get(first),prices.get(second),prices.get(third),prices.get(fourth),prices.get(fifth),prices.get(sixth)});


            }
        }}
        
    }//GEN-LAST:event_jbtnSearchPriceActionPerformed

    private void jbtnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRefreshActionPerformed
        // TODO add your handling code here:
        initialData();
       
    }//GEN-LAST:event_jbtnRefreshActionPerformed

    private void jbtnSortBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSortBrandActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        ArrayList<String> brandList = new ArrayList<String>();
        int rowCount = dataTable.getRowCount();
        int rowIndex = 0;
        int colIndex = 2;
        boolean emptyFlag = false;
        do {
            String brand = dataTable.getValueAt(rowIndex, colIndex).toString();
            if (brand != null && brand.length() != 0) {
                brandList.add(brand);
                rowIndex++;
            } else {
                emptyFlag = true;
            }
        } while (rowIndex < rowCount && !emptyFlag);
        selectionSortString(brandList);
        System.out.println(brandList);

        for (int i = 0; i < dataTable.getRowCount(); i++) {
            for (int j = 0; j < dataTable.getRowCount(); j++) {
                String a = dataTable.getValueAt(j, 2).toString();
                String b = a;
                if (b.equals(brandList.get(i))) {
                    model.moveRow(j, j, i);
                }
            }
        }
    }//GEN-LAST:event_jbtnSortBrandActionPerformed

    private void jbtnSearchBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSearchBrandActionPerformed
           String fixVal = null;
// TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        String mobileID = "";
        String modelName = "";
        String brand = "";
        String storage = "";
        String carrier = "";
        String amount = "";
        ArrayList<String> lis = new ArrayList<String>();
        ArrayList<String> brands = new ArrayList<String>();
        int rowCount = dataTable.getRowCount();
        int rowIndex = 0;
        int colIndex = 2;
        int brandCount = 0;
        boolean emptyFlag = false;
        do {
            String mobileBrand = dataTable.getValueAt(rowIndex, colIndex).toString();
            if (mobileBrand != null && mobileBrand.length() != 0) {
                lis.add(mobileBrand);
                rowIndex++;
            } else {
                emptyFlag = true;
            }
        } while (rowIndex < rowCount && !emptyFlag);
        selectionSortString(lis);
        //System.out.println(st);
        //System.out.println(st.get(0));
        
        //fixing the search input
        String searchVal = txtSearchBrand.getText();
     
        if (!searchVal.isBlank()){
         fixVal= searchVal.substring(0, 1).toUpperCase() + searchVal.substring(1).toLowerCase();
        System.out.println(fixVal);
        }
        if (txtSearchBrand.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter the Brand to search");
        } 
        else {
            for (int i = 0; i < dataTable.getRowCount(); i++) {        
                for (int j = 0; j < dataTable.getRowCount(); j++) {
                    String a = dataTable.getValueAt(j, 2).toString();
                    
                    if (a == lis.get(i)){
                        model.moveRow(j, j, i);
                    }
                }
            }
            
             for (int i = 0; i < dataTable.getRowCount(); i++) {
                if(lis.get(i).equals(fixVal)){
                        brandCount = brandCount +1;
                        brands.add(dataTable.getValueAt(i, 0).toString());
                        brands.add(dataTable.getValueAt(i, 1).toString());
                        brands.add(dataTable.getValueAt(i, 2).toString());
                        brands.add(dataTable.getValueAt(i, 3).toString());
                        brands.add(dataTable.getValueAt(i, 4).toString());
                        brands.add(dataTable.getValueAt(i, 5).toString()); 
                    }
             }
            System.out.println(brands);
            System.out.println(brandCount);
            String key = fixVal;
            int low = 0;
            int high = lis.size() - 1;
            int searchResult = GUI.searchBrand(lis, low, high, key);
            if (searchResult == -1) {
                JOptionPane.showMessageDialog(null, "No result found!");
               
            } else {
                mobileID = dataTable.getValueAt(searchResult, 0).toString();
                modelName = dataTable.getValueAt(searchResult, 1).toString();
                brand = dataTable.getValueAt(searchResult, 2).toString();
                storage = dataTable.getValueAt(searchResult, 3).toString();
                carrier = dataTable.getValueAt(searchResult, 4).toString();
                amount = dataTable.getValueAt(searchResult, 5).toString();
                JOptionPane.showMessageDialog(null, "Mobile ID: " + mobileID + "\nModel: " + modelName + "\nBrand: " + brand + "\nStorage: " + storage + "\nCarrier: " + carrier + "\nPrice: " + amount + "\nAvailable: " + brandCount);
                txtSearchBrand.setText("");
            }
            //showing new data 
            //removing datas from the table
       
        System.out.println("Row count is "+rowCount);
        //Remove rows one by one from the end of the table
        if (searchResult != -1){
            for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
            }
            System.out.println(model);
            for (int i = 0; i < brands.size(); i=i+6) {
                    int first = i;
                    int second = i+1;
                    int third = i+2;
                    int fourth = i+3;
                    int fifth = i+4;
                    int sixth = i+5;


                    model.addRow(new Object[]{brands.get(first),brands.get(second),brands.get(third),brands.get(fourth),brands.get(fifth),brands.get(sixth)});


            }
            }
        }
    }//GEN-LAST:event_jbtnSearchBrandActionPerformed

    private void txtSearchPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchPriceKeyTyped
        char price = evt.getKeyChar();
        if(!isNumber(price)){
            evt.consume();
     
        }
    }//GEN-LAST:event_txtSearchPriceKeyTyped

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtMobileID.setText("");
        txtMobileName.setText("");
        txtPrice.setText("");
        comboBrandName.setSelectedIndex(0);
        comboCarrier.setSelectedIndex(0);
        btnGrpStorage.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
      private boolean isNumber(char price){
            return price >= '0' && price <= '9';
        }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
            //Loading screen 
            loadingScreen loading = new loadingScreen();
            loading.setVisible(true);
            try {
                for (int i = 0; i < 100; i++) {
                    Thread.sleep(10);
                    loading.jlblLoading.setText(Integer.toString(i)+"%");
                    loading.jPB.setValue(i);
                    if (i==99) {
                        loading.setVisible(false);
                        
                    }
                }
        } catch (Exception e) {
            System.out.println(e);
        }
                    
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.ButtonGroup btnGrpStorage;
    private javax.swing.JComboBox<String> comboBrandName;
    private javax.swing.JComboBox<String> comboCarrier;
    public static javax.swing.JTable dataTable;
    public javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenuItem jMenuExit;
    public javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuHelpItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnRefresh;
    private javax.swing.JButton jbtnSearchBrand;
    private javax.swing.JButton jbtnSearchPrice;
    private javax.swing.JButton jbtnSortBrand;
    private javax.swing.JButton jbtnSortPrice;
    private javax.swing.JMenuItem jmenuOpen;
    private javax.swing.JLabel lblBrandName;
    private javax.swing.JLabel lblCarrier;
    private javax.swing.JLabel lblMobileID;
    private javax.swing.JLabel lblMobileName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblSearchBrand;
    private javax.swing.JLabel lblSearchPrice;
    private javax.swing.JLabel lblStorage;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel pnlComponents;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JRadioButton rb128;
    private javax.swing.JRadioButton rb16;
    private javax.swing.JRadioButton rb32;
    private javax.swing.JRadioButton rb64;
    private javax.swing.JTextField txtMobileID;
    private javax.swing.JTextField txtMobileName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearchBrand;
    private javax.swing.JTextField txtSearchPrice;
    // End of variables declaration//GEN-END:variables
}
